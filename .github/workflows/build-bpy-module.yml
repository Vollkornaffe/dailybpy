name: Build Blender bpy Module

on:
  workflow_dispatch: # Allow manual triggering

jobs:
  check-beta:
    runs-on: ubuntu-latest
    outputs:
      beta_active: ${{ steps.check.outputs.beta_active }}
      beta_branch: ${{ steps.check.outputs.beta_branch }}
      beta_version: ${{ steps.check.outputs.beta_version }}
    steps:
      - name: Check if beta period is active
        id: check
        run: |
          # Find any blender-v*-release branches
          BETA_BRANCH=$(git ls-remote --heads https://github.com/blender/blender.git | grep -o 'blender-v[0-9.]*-release' | tail -n1)

          if [ -n "$BETA_BRANCH" ]; then
            echo "Found beta branch: $BETA_BRANCH"

            # Extract version number (e.g., "5.0" from "blender-v5.0-release")
            VERSION=$(echo "$BETA_BRANCH" | sed 's/blender-v\([0-9.]*\)-release/\1/')
            echo "Beta version: $VERSION"

            # Check if stable release tag exists (e.g., v5.0.0)
            if git ls-remote --tags https://github.com/blender/blender.git | grep -q "refs/tags/v${VERSION}.0$"; then
              echo "Stable v${VERSION}.0 released - beta period over"
              echo "beta_active=false" >> $GITHUB_OUTPUT
            else
              echo "Beta period active for v${VERSION}"
              echo "beta_active=true" >> $GITHUB_OUTPUT
              echo "beta_branch=$BETA_BRANCH" >> $GITHUB_OUTPUT
              echo "beta_version=$VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "No beta branch found"
            echo "beta_active=false" >> $GITHUB_OUTPUT
          fi

  build-linux:
    needs: check-beta
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        include:
          - branch: main
            suffix: ""
          - branch: ${{ needs.check-beta.outputs.beta_branch }}
            suffix: "-beta"
            version: ${{ needs.check-beta.outputs.beta_version }}
    steps:
      - name: Checkout Blender repository
        # Skip beta build if beta is not active
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/checkout@v4
        with:
          repository: "blender/blender"
          ref: ${{ matrix.branch }}
          fetch-depth: 1 # Shallow clone
          submodules: "recursive"

      - name: Set up Python
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential cmake git subversion \
            libx11-dev libxxf86vm-dev libxcursor-dev libxi-dev \
            libxrandr-dev libxinerama-dev libegl-dev \
            libwayland-dev wayland-protocols libxkbcommon-dev libdbus-1-dev linux-libc-dev
      
      - name: Patch platform_unix.cmake
        run: |
          sed -i '400c\  list(FILTER _sycl_runtime_libraries EXCLUDE REGEX [.*\\.py$])' build_files/cmake/platform/platform_unix.cmake

      - name: Inject debug print into platform_unix.cmake
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          FILE=build_files/cmake/platform/platform_unix.cmake
          if [ -f "$FILE" ]; then
            echo "Patching $FILE (inserting debug print after line 401)"
            awk 'NR==401{print; print "message(STATUS \"PLATFORM_BUNDLED_LIBRARIES=${PLATFORM_BUNDLED_LIBRARIES}\")"; print "message(FATAL_ERROR \"Halting build after printing PLATFORM_BUNDLED_LIBRARIES\")"; next} {print}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
            echo "Patch applied. Showing context around insertion:"
            sed -n '396,410p' "$FILE" || true
          else
            echo "$FILE not found; skipping patch"
          fi

      - name: Inject debug print into platform_unix.cmake
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          FILE=build_files/cmake/platform/platform_unix.cmake
          if [ -f "$FILE" ]; then
            echo "Patching $FILE (inserting debug print after line 399)"
            awk 'NR==399{print; print "message(STATUS \"_sycl_runtime_libraries=${_sycl_runtime_libraries}\")"; next} {print}' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
            echo "Patch applied. Showing context around insertion:"
            sed -n '394,410p' "$FILE" || true
          else
            echo "$FILE not found; skipping patch"
          fi

      - name: Update libraries
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          make update

      - name: Build bpy module
        if: matrix.branch == 'main' || needs.check-beta.outputs.beta_active == 'true'
        run: |
          make bpy
